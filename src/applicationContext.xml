<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!-- 配置bean class:bean的全类名，通过反射的方式在IOC容器中创建bean，所以必须要求bean有一个无参构造器 -->
	<bean id="helloWorld" class="com.example.spring.beans.HelloWorld">
		<property name="name" value="Fucking Spring"></property>
	</bean>

	<!-- 通过构造器来配置bean -->
	<bean id="car" class="com.example.spring.beans.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg index="1">
			<!-- 若字面值中包含特殊字符, 则可以使用 DCDATA 来进行赋值. (了解) -->
			<value><![CDATA[<ShangHai^>]]></value>
		</constructor-arg>
		<constructor-arg value="300000" type="double"></constructor-arg>
	</bean>

	<!-- 若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 -->
	<!-- 可以根据 index 和 value 进行更加精确的定位. -->
	<bean id="car2" class="com.example.spring.beans.Car">
		<constructor-arg value="BWM" type="java.lang.String"></constructor-arg>
		<constructor-arg value="ShangHai" type="java.lang.String"></constructor-arg>
		<constructor-arg type="int">
			<value>240</value>
		</constructor-arg>
	</bean>

	<bean id="person" class="com.example.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<!-- 内部 bean, 类似于匿名内部类对象. 不能被外部的 bean 来引用, 也没有必要设置 id 属性 -->
		<property name="car" ref="car2"></property>
		<!-- 赋空值 -->
		<!-- <property name="car"><null/></property> -->
		<!-- 为级联属性赋值 -->
		<property name="car.maxSpeed" value="250"></property>
	</bean>
	<bean id="person2" class="com.example.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<property name="car">
			<ref bean="car"></ref>
		</property>
	</bean>

	<bean id="person3" class="com.example.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<property name="car">
			<!-- 内部 bean, 类似于匿名内部类对象. 不能被外部的 bean 来引用, 也没有必要设置 id 属性 -->
			<bean class="com.example.spring.beans.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="ChangAn"></constructor-arg>
				<constructor-arg value="20000" type="double"></constructor-arg>
			</bean>
		</property>
	</bean>
	
	
	<!-- 配置集合属性 -->
	<bean id="person4" class="com.example.spring.beans.collection.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="24"></property>
		<property name="cars">
			<list >
				<ref bean="car" />
				<ref bean="car2" />
				<bean class="com.example.spring.beans.Car">
					<constructor-arg value="Ford"></constructor-arg>
					<constructor-arg value="ChangAn"></constructor-arg>
					<constructor-arg value="20000" type="double"></constructor-arg>
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- 配置Map属性 -->
	<bean id="newPerson" class="com.example.spring.beans.collection.NewPerson">
	     <property name="name" value="Jordan"></property>
	     <property name="age" value="50"></property>
	     <property name="cars">
	        <!-- 使用Map节点及map的子节点entry配置类的成员变量 -->
	         <map >
	            <entry key="AAA" value-ref="car"></entry>
	            <entry key="BBB" value-ref="car2"></entry>
	         </map>
	      </property>
	</bean>
	
	<!-- 配置Properties属性值 -->
	<bean id="dataSource" class="com.example.spring.beans.collection.DataSource">
	     <property name="properties">
	          <props>
	             <prop key="user">root</prop>
	             <prop key="password">1234</prop>
	             <prop key="jdbcUrl">jdbc</prop>
	             <prop key="driverClass">com.mysql.jdbc.driver</prop>
	          </props>
	     </property>
	</bean>
	<!-- 配置独立的集合Bean，供其他Bean引用 ，需要导入Util命名空间-->
	<util:list id="cars">
	   <ref bean="car"/>
	   <ref bean="car2"/>
	</util:list>
	
	<!-- 通过p的命名空间为Bean的属性赋值，需要先导入命名空间
	      相对于传统方式更加简洁 -->
	   <bean id="person5" class="com.example.spring.beans.collection.Person" p:age="30"
	       p:name="Kobe" p:cars-ref="cars">
	       
	   </bean>
</beans>
